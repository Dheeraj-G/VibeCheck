// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 50e3606df38c546f "Vibe Check", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
}} Props

 */

/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */
import { stdin_default } from "./chunks/chunk-E2DYYFEU.js";
import { routes } from "./chunks/chunk-OCBFYQCN.js";

// virtual:main-body
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/XIJAL8xLolkf52DT1yYG/TJwqayHLbH5LjeDfVGX5/hTEXCOFwi.js
import { jsx as _jsx2, jsxs as _jsxs2 } from "react/jsx-runtime";
import {
	addFonts,
	ComponentViewportProvider,
	cx,
	getFonts,
	Image,
	RichText,
	SmartComponentScopedContainer,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion as motion2, MotionConfigContext } from "unframer";
import * as React3 from "react";
import { useRef as useRef4 } from "react";

// /:https://framerusercontent.com/modules/UIrMjSS6ZX89L0CsT8k6/zmbFgJVc8YCf1HAWjlM4/Carousel.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import {
	Children,
	useCallback as useCallback2,
	useEffect as useEffect7,
	useState as useState3,
	useRef as useRef3,
	cloneElement,
	startTransition,
} from "react";
import {
	addPropertyControls,
	ControlType as ControlType4,
	RenderTarget as RenderTarget3,
} from "unframer";
import { scroll, resize } from "@motionone/dom";
import { clamp } from "@motionone/utils";
import {
	animate as animate2,
	motion,
	useMotionValue,
	useTransform,
	useReducedMotion,
} from "unframer";

// /:https://framerusercontent.com/modules/VTUDdizacRHpwbkOamr7/AykinQJbgwl92LvMGZwu/constants.js
import { ControlType } from "unframer";
var containerStyles = {
	position: "relative",
	width: "100%",
	height: "100%",
	display: "flex",
	justifyContent: "center",
	alignItems: "center",
};
var emptyStateStyle = {
	...containerStyles,
	borderRadius: 6,
	background: "rgba(136, 85, 255, 0.3)",
	color: "#85F",
	border: "1px dashed #85F",
	flexDirection: "column",
};
var defaultEvents = {
	onClick: {
		type: ControlType.EventHandler,
	},
	onMouseEnter: {
		type: ControlType.EventHandler,
	},
	onMouseLeave: {
		type: ControlType.EventHandler,
	},
};
var fontSizeOptions = {
	type: ControlType.Number,
	title: "Font Size",
	min: 2,
	max: 200,
	step: 1,
	displayStepper: true,
};
var fontControls = {
	font: {
		type: ControlType.Boolean,
		title: "Font",
		defaultValue: false,
		disabledTitle: "Default",
		enabledTitle: "Custom",
	},
	fontFamily: {
		type: ControlType.String,
		title: "Family",
		placeholder: "Inter",
		hidden: ({ font }) => !font,
	},
	fontWeight: {
		type: ControlType.Enum,
		title: "Weight",
		options: [100, 200, 300, 400, 500, 600, 700, 800, 900],
		optionTitles: [
			"Thin",
			"Extra-light",
			"Light",
			"Regular",
			"Medium",
			"Semi-bold",
			"Bold",
			"Extra-bold",
			"Black",
		],
		hidden: ({ font }) => !font,
	},
};

// /:https://framerusercontent.com/modules/D4TWeLfcxT6Tysr2BlYg/iZjmqdxVx1EOiM3k1FaW/useOnNavigationTargetChange.js
import { useIsInCurrentNavigationTarget } from "unframer";
import { useEffect } from "react";

// /:https://framerusercontent.com/modules/ExNgrA7EJTKUPpH6vIlN/eiOrSJ2Ab5M9jPCvVwUz/useConstant.js
import { useRef } from "react";

// /:https://framerusercontent.com/modules/D2Lz5CmnNVPZFFiZXalt/QaCzPbriZBfXWZIIycFI/colorFromToken.js
import { Color } from "unframer";

// /:https://framerusercontent.com/modules/3mKFSGQqKHV82uOV1eBc/5fbRLvOpxZC0JOXugvwm/isMotionValue.js
import { MotionValue } from "unframer";

// /:https://framerusercontent.com/modules/xDiQsqBGXzmMsv7AlEVy/uhunpMiNsbXxzjlXsg1y/useUniqueClassName.js
import * as React from "react";

// /:https://framerusercontent.com/modules/ETACN5BJyFTSo0VVDJfu/NHRqowOiXkF9UwOzczF7/variantUtils.js
import { ControlType as ControlType2 } from "unframer";

// /:https://framerusercontent.com/modules/eMBrwoqQK7h6mEeGQUH8/GuplvPJVjmxpk9zqOTcb/isBrowser.js
import { useMemo } from "react";

// /:https://framerusercontent.com/modules/v9AWX2URmiYsHf7GbctE/XxKAZ9KlhWqf5x1JMyyF/useOnChange.js
import { useEffect as useEffect3 } from "react";

// /:https://framerusercontent.com/modules/kNDwabfjDEb3vUxkQlZS/fSIr3AOAYbGlfSPgXpYu/useAutoMotionValue.js
import { useCallback, useEffect as useEffect4, useRef as useRef2 } from "react";
import { motionValue, animate, RenderTarget } from "unframer";

// /:https://framerusercontent.com/modules/cuQH4dmpDnV8YK1mSgQX/KqRXqunFjE6ufhpc7ZRu/useFontControls.js
import { fontStore } from "unframer";
import { useEffect as useEffect5 } from "react";

// /:https://framerusercontent.com/modules/afBE9Yx1W6bY5q32qPxe/m3q7puE2tbo1S2C0s0CT/useRenderTarget.js
import { useMemo as useMemo2 } from "react";
import { RenderTarget as RenderTarget2 } from "unframer";

// /:https://framerusercontent.com/modules/zGkoP8tPDCkoBzMdt5uq/0zFSjxIYliHxrQQnryFX/useControlledState.js
import * as React2 from "react";

// /:https://framerusercontent.com/modules/5SM58HxZHxjjv7aLMOgQ/WXz9i6mVki0bBCrKdqB3/propUtils.js
import { useMemo as useMemo3 } from "react";
import { ControlType as ControlType3 } from "unframer";
var borderRadiusControl = {
	borderRadius: {
		title: "Radius",
		type: ControlType3.FusedNumber,
		toggleKey: "isMixedBorderRadius",
		toggleTitles: ["Radius", "Radius per corner"],
		valueKeys: [
			"topLeftRadius",
			"topRightRadius",
			"bottomRightRadius",
			"bottomLeftRadius",
		],
		valueLabels: ["TL", "TR", "BR", "BL"],
		min: 0,
	},
};
function usePadding(props) {
	const {
		padding,
		paddingPerSide,
		paddingTop,
		paddingRight,
		paddingBottom,
		paddingLeft,
	} = props;
	const paddingValue = useMemo3(
		() =>
			paddingPerSide
				? `${paddingTop}px ${paddingRight}px ${paddingBottom}px ${paddingLeft}px`
				: padding,
		[
			padding,
			paddingPerSide,
			paddingTop,
			paddingRight,
			paddingBottom,
			paddingLeft,
		],
	);
	return paddingValue;
}
var paddingControl = {
	padding: {
		type: ControlType3.FusedNumber,
		toggleKey: "paddingPerSide",
		toggleTitles: ["Padding", "Padding per side"],
		valueKeys: ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"],
		valueLabels: ["T", "R", "B", "L"],
		min: 0,
		title: "Padding",
	},
};

// /:https://framerusercontent.com/modules/UIrMjSS6ZX89L0CsT8k6/zmbFgJVc8YCf1HAWjlM4/Carousel.js
function calcMaskWidth([inset, width]) {
	return inset + (100 - inset) * (width / 100) * 0.5;
}
function checkLimit(
	progress,
	target,
	{ edgeOpacity, moreItems, buttonRef },
	transition,
) {
	if (moreItems.current && progress === target) {
		moreItems.current = false;
		animate2(edgeOpacity, 1, transition);
		buttonRef.current?.setAttribute("disabled", "");
	} else if (!moreItems.current && progress !== target) {
		moreItems.current = true;
		animate2(edgeOpacity, 0, transition);
		buttonRef.current?.removeAttribute("disabled");
	}
}
function useGUI(initialMoreItems, initialAlpha) {
	const moreItems = useRef3(initialMoreItems);
	const edgeOpacity = useMotionValue(moreItems.current ? 0 : 1);
	const fadeOpacity = useTransform(edgeOpacity, [0, 1], [initialAlpha || 0, 1]);
	const buttonOpacity = useTransform(edgeOpacity, (v) => 1 - v);
	const buttonRef = useRef3(null);
	const pointerEvents = useTransform(buttonOpacity, (v) =>
		v > 0.2 ? "auto" : "none",
	);
	const cursor = useTransform(pointerEvents, (v) =>
		v === "auto" ? "pointer" : "default",
	);
	const buttonStyle = {
		...baseButtonStyles,
		opacity: buttonOpacity,
		pointerEvents,
		cursor,
	};
	return {
		moreItems,
		fadeOpacity,
		edgeOpacity,
		buttonStyle,
		buttonRef,
	};
}
function setAriaVisible({ element }) {
	element.setAttribute("aria-hidden", false);
}
function useScrollLimits(
	container,
	axis,
	scrollInfo,
	updateCurrentScroll,
	targetScroll,
	checkLimits,
	measureItems,
) {
	useEffect7(() => {
		if (!container.current) return;
		const updateScrollInfo = (info) => {
			scrollInfo.current = info[axis];
			if (info[axis].current === targetScroll.current) {
				targetScroll.current = void 0;
			}
			updateCurrentScroll(info[axis].current);
			checkLimits();
		};
		const stopScroll = scroll(updateScrollInfo, {
			container: container.current,
			axis,
		});
		const stopResize = resize(container.current, () => {
			measureItems();
			checkLimits();
		});
		return () => {
			stopScroll();
			stopResize();
		};
	}, [checkLimits, measureItems]);
}
function Carousel({
	slots,
	gap,
	axis,
	align,
	sizingObject,
	fadeObject,
	arrowObject,
	snapObject,
	progressObject,
	ariaLabel,
	borderRadius,
	effectsObject,
	...props
}) {
	const filteredSlots = slots?.filter(Boolean);
	const numItems = Children.count(filteredSlots);
	const isCanvas = RenderTarget3.current() === RenderTarget3.canvas;
	const padding = usePadding(props);
	const axisLabel = axis ? "x" : "y";
	const { fadeContent, fadeWidth, fadeInset, fadeTransition, fadeAlpha } =
		fadeObject;
	const { snap, snapEdge, fluid } = snapObject;
	const {
		widthType,
		widthInset,
		widthColumns,
		heightType,
		heightInset,
		heightRows,
	} = sizingObject;
	const {
		showScrollbar,
		showProgressDots,
		dotSize,
		dotsInset,
		dotsRadius,
		dotsPadding,
		dotsGap,
		dotsFill,
		dotsBackground,
		dotsActiveOpacity,
		dotsOpacity,
		dotsBlur,
	} = progressObject;
	const {
		showMouseControls,
		arrowSize,
		arrowRadius,
		arrowFill,
		leftArrow,
		rightArrow,
		arrowPadding,
	} = arrowObject;
	const scrollInfo = useRef3(void 0);
	const targetScroll = useRef3(void 0);
	const currentScroll = useMotionValue(0);
	const updateCurrentScroll = (newScroll) => {
		currentScroll.set(
			targetScroll.current !== void 0 ? targetScroll.current : newScroll,
		);
	};
	const start = useGUI(false, fadeAlpha);
	const end = useGUI(true, fadeAlpha);
	const startMaskInset = useMotionValue(fadeInset * 0.5);
	const endMaskInset = useTransform(startMaskInset, (v) => 100 - v);
	const baseWidth = useMotionValue(fadeWidth);
	const startMaskWidth = useTransform(
		[startMaskInset, baseWidth],
		calcMaskWidth,
	);
	const endMaskWidth = useTransform(startMaskWidth, (v) => 100 - v);
	const direction = useMotionValue(axis ? "right" : "bottom");
	const mask = useTransform(
		[
			direction,
			start.fadeOpacity,
			startMaskInset,
			startMaskWidth,
			end.fadeOpacity,
			endMaskInset,
			endMaskWidth,
		],
		(latest) => {
			return `linear-gradient(to ${latest[0]}, rgb(0, 0, 0, ${latest[1]}) ${latest[2]}%, rgb(0, 0, 0, 1) ${latest[3]}%, rgba(0, 0, 0, 1) ${latest[6]}%, rgb(0, 0, 0, ${latest[4]}) ${latest[5]}%)`;
		},
	);
	const carouselRef = useRef3(null);
	const [numPages, setNumPages] = useState3(isCanvas ? 4 : 1);
	const itemStyle = {
		scrollSnapAlign: snapEdge,
		flexShrink: 0,
	};
	const childStyle = {};
	if (align === "stretch") {
		if (axis) {
			childStyle.height = "100%";
			itemStyle.height = "auto";
		} else {
			childStyle.width = "100%";
			itemStyle.width = "auto";
		}
	}
	if (!fluid) {
		itemStyle.scrollSnapStop = "always";
	}
	if (widthType === "stretch") {
		itemStyle.width = `calc(100% - ${widthInset || 0}px)`;
		childStyle.width = "100%";
	} else if (widthType === "columns") {
		itemStyle.width = `calc(${100 / widthColumns}% - ${gap}px + ${gap / widthColumns}px)`;
		childStyle.width = "100%";
	}
	if (heightType === "stretch") {
		itemStyle.height = `calc(100% - ${heightInset || 0}px)`;
		childStyle.height = "100%";
	} else if (heightType === "rows") {
		itemStyle.height = `calc(${100 / heightRows}% - ${gap}px + ${gap / heightRows}px)`;
		childStyle.height = "100%";
	}
	const scrollOverflow = isCanvas ? "hidden" : "auto";
	const containerStyle = {
		...baseContainerStyle,
		padding,
	};
	const carouselStyle = {
		...baseCarouselStyle,
		gap,
		alignItems: align,
		flexDirection: axis ? "row" : "column",
		overflowX: axis ? scrollOverflow : "hidden",
		overflowY: axis ? "hidden" : scrollOverflow,
		scrollSnapType: snap ? `${axisLabel} mandatory` : void 0,
		WebkitOverflowScrolling: "touch",
		WebkitMaskImage: fadeContent ? mask : void 0,
		maskImage: fadeContent ? mask : void 0,
		borderRadius,
	};
	const carouselA11y = {
		["aria-roledescription"]: "carousel",
	};
	if (ariaLabel) {
		carouselA11y["aria-title"] = ariaLabel;
	}
	const itemA11y = {};
	if (align === "stretch") {
		itemA11y["aria-role"] = "group";
		itemA11y["aria-roledescription"] = "slide";
	}
	if (!isCanvas) {
		const itemSizes = useRef3([]);
		useScrollLimits(
			carouselRef,
			axisLabel,
			scrollInfo,
			updateCurrentScroll,
			targetScroll,
			useCallback2(() => {
				if (!scrollInfo.current) return;
				const { targetLength, containerLength, scrollLength } =
					scrollInfo.current;
				const current = currentScroll.get();
				if (!targetLength && !containerLength) return;
				if (targetLength > containerLength) {
					checkLimit(current, 0, start, fadeTransition);
					checkLimit(current, scrollLength, end, fadeTransition);
					for (let i = 0; i < itemSizes.current.length; i++) {
						const { element, start: start2, end: end2 } = itemSizes.current[i];
						if (end2 < current || start2 > current + containerLength) {
							element.setAttribute("aria-hidden", true);
						} else {
							element.setAttribute("aria-hidden", false);
						}
					}
				} else {
					checkLimit(0, 0, start, fadeTransition);
					checkLimit(1, 1, end, fadeTransition);
					itemSizes.current.forEach(setAriaVisible);
				}
				let newNumPages = Math.ceil(targetLength / containerLength);
				if (!isNaN(newNumPages)) {
					if (newNumPages / numItems > 0.65) newNumPages = numItems;
					if (newNumPages !== numPages) setNumPages(newNumPages);
				}
			}, [numPages]),
			useCallback2(() => {
				if (!carouselRef.current) return;
				itemSizes.current = Array.from(carouselRef.current.children).map(
					(element) => {
						return axis
							? {
									element,
									start: element.offsetLeft,
									end: element.offsetLeft + element.offsetWidth,
								}
							: {
									element,
									start: element.offsetTop,
									end: element.offsetTop + element.offsetHeight,
								};
					},
				);
			}, []),
		);
	}
	if (isCanvas) {
		useEffect7(() => {
			baseWidth.set(fadeWidth);
		}, [fadeWidth]);
		useEffect7(() => {
			startMaskInset.set(fadeInset * 0.5);
		}, [fadeInset]);
		useEffect7(() => {
			direction.set(axis ? "right" : "bottom");
		}, [axis]);
	}
	const isReducedMotion = useReducedMotion();
	const goto = (scrollTo) => {
		targetScroll.current = scrollTo;
		const options = axis
			? {
					left: scrollTo,
				}
			: {
					top: scrollTo,
				};
		carouselRef.current.scrollTo({
			...options,
			behavior: isReducedMotion ? "auto" : "smooth",
		});
	};
	const gotoPage = (page, adjustment = 0) => {
		if (!scrollInfo.current) return;
		const { scrollLength } = scrollInfo.current;
		const totalLen = scrollLength / (numPages - 1);
		goto(page * totalLen + adjustment * totalLen);
	};
	const gotoDelta = (delta) => () => {
		if (!scrollInfo.current) return;
		const { containerLength, scrollLength } = scrollInfo.current;
		const current = currentScroll.get();
		const pageLength = scrollLength / numPages;
		const currentPage = clamp(
			0,
			numPages - 1,
			Math.floor(current / pageLength),
		);
		let adjustment = 0;
		if (snap && (snapEdge === "start" || snapEdge === "end") && delta >= 1)
			adjustment = 0.4;
		gotoPage(currentPage + delta, adjustment);
	};
	if (numItems === 0) {
		return <Placeholder />;
	}
	const dots = [];
	const dotsBlurStyle = {};
	if (numPages > 1 && showProgressDots && !showScrollbar) {
		for (let i = 0; i < numPages; i++) {
			const isSelected = (isCanvas && !i) || false;
			dots.push(
				<Dot
					dotStyle={{
						...dotStyle,
						width: dotSize,
						height: dotSize,
						backgroundColor: dotsFill,
					}}
					buttonStyle={baseButtonStyles}
					isSelected={isSelected}
					selectedOpacity={dotsActiveOpacity}
					opacity={dotsOpacity}
					onClick={() => startTransition(() => gotoPage(i))}
					currentScroll={currentScroll}
					scrollInfo={scrollInfo}
					total={numPages}
					index={i}
					gap={dotsGap}
					padding={dotsPadding}
					axis={axis}
				/>,
			);
		}
		if (dotsBlur) {
			dotsBlurStyle.backdropFilter =
				dotsBlurStyle.WebkitBackdropFilter = `blur(${dotsBlur}px)`;
		}
	}
	return (
		<section style={containerStyle} {...carouselA11y}>
			<motion.ul
				ref={carouselRef}
				style={carouselStyle}
				className={"framer--carousel"}
				data-show-scrollbar={showScrollbar}
				aria-atomic={"false"}
				aria-live={"polite"}
				onWheel={() => (targetScroll.current = void 0)}
			>
				{Children.map(filteredSlots, (child, index) => (
					<li
						style={itemStyle}
						{...itemA11y}
						aria-label={`${index + 1} of ${numItems}`}
					>
						{
							/* @__PURE__ */ cloneElement(child, {
								...child.props,
								style: {
									...child.props?.style,
									...childStyle,
								},
							})
						}
					</li>
				))}
			</motion.ul>
			<fieldset
				style={{
					...controlsStyles,
					padding: arrowPadding,
					display: "flex",
					flexDirection: axis ? "row" : "column",
				}}
				aria-label={"Carousel pagination controls"}
				className={"framer--carousel-controls"}
				data-show-mouse-controls={showMouseControls}
			>
				{" "}
				// isMouseDevice &&
				<motion.button
					ref={start.buttonRef}
					type={"button"}
					style={{
						...start.buttonStyle,
						backgroundColor: arrowFill,
						width: arrowSize,
						height: arrowSize,
						borderRadius: arrowRadius,
						rotate: !axis ? 90 : 0,
						display: showMouseControls ? "block" : "none",
					}}
					onClick={gotoDelta(-1)}
					aria-label={"Previous"}
					whileTap={{
						scale: 0.9,
					}}
					transition={{
						duration: 0.05,
					}}
				>
					<img
						decoding={"async"}
						alt={""}
						width={arrowSize}
						height={arrowSize}
						src={
							leftArrow ||
							"https://framerusercontent.com/images/6tTbkXggWgQCAJ4DO2QEdXXmgM.svg"
						}
					/>
				</motion.button>{" "}
				// isMouseDevice &&
				<motion.button
					ref={end.buttonRef}
					type={"button"}
					style={{
						...end.buttonStyle,
						backgroundColor: arrowFill,
						width: arrowSize,
						height: arrowSize,
						borderRadius: arrowRadius,
						rotate: !axis ? 90 : 0,
						display: showMouseControls ? "block" : "none",
					}}
					onClick={gotoDelta(1)}
					aria-label={"Next"}
					whileTap={{
						scale: 0.9,
					}}
					transition={{
						duration: 0.05,
					}}
				>
					<img
						decoding={"async"}
						alt={""}
						width={arrowSize}
						height={arrowSize}
						src={
							rightArrow ||
							"https://framerusercontent.com/images/11KSGbIZoRSg4pjdnUoif6MKHI.svg"
						}
					/>
				</motion.button>
				{dots.length > 1 ? (
					<div
						style={{
							...dotsContainerStyle,
							left: axis ? "50%" : dotsInset,
							top: !axis ? "50%" : "unset",
							transform: axis ? "translateX(-50%)" : "translateY(-50%)",
							flexDirection: axis ? "row" : "column",
							bottom: axis ? dotsInset : "unset",
							borderRadius: dotsRadius,
							backgroundColor: dotsBackground,
							...dotsBlurStyle,
						}}
					>
						{dots}
					</div>
				) : null}
			</fieldset>
			<MouseStyles />
		</section>
	);
}
Carousel.defaultProps = {
	gap: 10,
	padding: 10,
	progressObject: {
		showScrollbar: false,
		showProgressDots: false,
	},
	sizingObject: {
		widthType: "auto",
		widthOffset: 0,
		widthColumns: 2,
		heightType: "auto",
		heightOffset: 0,
		heightRows: 2,
	},
	borderRadius: 0,
};
addPropertyControls(Carousel, {
	slots: {
		type: ControlType4.Array,
		title: "Children",
		control: {
			type: ControlType4.ComponentInstance,
		},
	},
	axis: {
		type: ControlType4.Enum,
		title: "Direction",
		options: [true, false],
		optionIcons: ["direction-horizontal", "direction-vertical"],
		displaySegmentedControl: true,
	},
	align: {
		type: ControlType4.Enum,
		title: "Align",
		options: ["flex-start", "center", "flex-end"],
		optionIcons: {
			axis: {
				true: ["align-top", "align-middle", "align-bottom"],
				false: ["align-left", "align-center", "align-right"],
			},
		},
		defaultValue: "center",
		displaySegmentedControl: true,
	},
	gap: {
		type: ControlType4.Number,
		title: "Gap",
	},
	...paddingControl,
	sizingObject: {
		type: ControlType4.Object,
		title: "Sizing",
		controls: {
			widthType: {
				type: ControlType4.Enum,
				title: "Width",
				options: ["auto", "stretch", "columns"],
				optionTitles: ["Auto", "Stretch", "Columns"],
				defaultValue: "auto",
			},
			widthInset: {
				type: ControlType4.Number,
				title: "Inset",
				min: 0,
				max: 500,
				defaultValue: 0,
				hidden: (props) => props.widthType !== "stretch",
			},
			widthColumns: {
				type: ControlType4.Number,
				title: "Columns",
				min: 1,
				max: 10,
				defaultValue: 2,
				displayStepper: true,
				hidden: (props) => props.widthType !== "columns",
			},
			heightType: {
				type: ControlType4.Enum,
				title: "Height",
				options: ["auto", "stretch", "rows"],
				optionTitles: ["Auto", "Stretch", "Rows"],
				defaultValue: "auto",
			},
			heightInset: {
				type: ControlType4.Number,
				title: "Inset",
				min: 0,
				max: 500,
				defaultValue: 0,
				hidden: (props) => props.heightType !== "stretch",
			},
			heightRows: {
				type: ControlType4.Number,
				title: "Rows",
				min: 1,
				max: 10,
				defaultValue: 2,
				displayStepper: true,
				hidden: (props) => props.heightType !== "rows",
			},
		},
	},
	snapObject: {
		type: ControlType4.Object,
		title: "Snapping",
		controls: {
			snap: {
				type: ControlType4.Boolean,
				title: "Enable",
			},
			snapEdge: {
				type: ControlType4.Enum,
				title: "Edge",
				options: ["start", "center", "end"],
				optionTitles: ["Left", "Center", "Right"],
				defaultValue: "center",
				hidden: (props) => !props.snap,
			},
			fluid: {
				type: ControlType4.Boolean,
				title: "Fluid",
				defaultValue: false,
				hidden: (props) => !props.snap,
			},
		},
	},
	fadeObject: {
		type: ControlType4.Object,
		title: "Fading",
		controls: {
			fadeContent: {
				type: ControlType4.Boolean,
				title: "Enable",
				defaultValue: false,
			},
			fadeWidth: {
				type: ControlType4.Number,
				title: "Width",
				defaultValue: 25,
				min: 0,
				max: 100,
				unit: "%",
				hidden: (props) => !props.fadeContent,
			},
			fadeInset: {
				type: ControlType4.Number,
				title: "Inset",
				defaultValue: 0,
				min: 0,
				max: 100,
				unit: "%",
				hidden: (props) => !props.fadeContent,
			},
			fadeAlpha: {
				type: ControlType4.Number,
				title: "Opacity",
				hidden: (props) => !props.fadeContent,
				min: 0,
				max: 1,
				step: 0.05,
				defaultValue: 0,
			},
			fadeTransition: {
				type: ControlType4.Transition,
				title: "Transition",
				hidden: (props) => !props.fadeContent,
			},
		},
	},
	progressObject: {
		type: ControlType4.Object,
		title: "Progress",
		controls: {
			showScrollbar: {
				type: ControlType4.Boolean,
				title: "Scroll Bar",
				defaultValue: false,
			},
			showProgressDots: {
				type: ControlType4.Boolean,
				title: "Dots",
				defaultValue: false,
				hidden: (props) => props.showScrollbar,
			},
			dotSize: {
				type: ControlType4.Number,
				title: "Size",
				min: 1,
				max: 100,
				defaultValue: 10,
				displayStepper: true,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsInset: {
				type: ControlType4.Number,
				title: "Inset",
				min: 0,
				max: 100,
				defaultValue: 10,
				displayStepper: true,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsGap: {
				type: ControlType4.Number,
				title: "Gap",
				min: 0,
				max: 100,
				defaultValue: 10,
				displayStepper: true,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsPadding: {
				type: ControlType4.Number,
				title: "Padding",
				min: 0,
				max: 100,
				defaultValue: 10,
				displayStepper: true,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsFill: {
				type: ControlType4.Color,
				title: "Fill",
				defaultValue: "#fff",
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsBackground: {
				type: ControlType4.Color,
				title: "Backdrop",
				defaultValue: "rgba(0,0,0,0.2)",
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsRadius: {
				type: ControlType4.Number,
				title: "Radius",
				min: 0,
				max: 200,
				defaultValue: 50,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsOpacity: {
				type: ControlType4.Number,
				title: "Opacity",
				min: 0,
				max: 1,
				defaultValue: 0.5,
				step: 0.1,
				displayStepper: true,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsActiveOpacity: {
				type: ControlType4.Number,
				title: "Current",
				min: 0,
				max: 1,
				defaultValue: 1,
				step: 0.1,
				displayStepper: true,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsBlur: {
				type: ControlType4.Number,
				title: "Blur",
				min: 0,
				max: 50,
				defaultValue: 4,
				step: 1,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
		},
	},
	arrowObject: {
		type: ControlType4.Object,
		title: "Arrows",
		controls: {
			showMouseControls: {
				type: ControlType4.Boolean,
				title: "Show",
				defaultValue: true,
			},
			arrowFill: {
				type: ControlType4.Color,
				title: "Fill",
				defaultValue: "rgba(0,0,0,0.2)",
				hidden: (props) => !props.showMouseControls,
			},
			leftArrow: {
				type: ControlType4.Image,
				title: "Previous",
				hidden: (props) => !props.showMouseControls,
			},
			rightArrow: {
				type: ControlType4.Image,
				title: "Next",
				hidden: (props) => !props.showMouseControls,
			},
			arrowSize: {
				type: ControlType4.Number,
				title: "Size",
				min: 0,
				max: 200,
				displayStepper: true,
				defaultValue: 40,
				hidden: (props) => !props.showMouseControls,
			},
			arrowRadius: {
				type: ControlType4.Number,
				title: "Radius",
				min: 0,
				max: 500,
				defaultValue: 40,
				hidden: (props) => !props.showMouseControls,
			},
			arrowPadding: {
				type: ControlType4.Number,
				title: "Inset",
				min: 0,
				max: 100,
				defaultValue: 20,
				displayStepper: true,
				hidden: (props) => !props.showMouseControls,
			},
		},
	},
	ariaLabel: {
		type: ControlType4.String,
		title: "Aria Label",
		placeholder: "Movies...",
	},
	borderRadius: {
		type: ControlType4.Number,
		title: "Radius",
		min: 0,
		max: 500,
		displayStepper: true,
		defaultValue: 0,
	},
});
function Dot({
	currentScroll,
	scrollInfo,
	isSelected,
	selectedOpacity,
	opacity: unselectedOpacity,
	total,
	index,
	dotStyle: dotStyle2,
	buttonStyle,
	gap,
	padding,
	axis,
	...props
}) {
	const opacity = useTransform(currentScroll, (v) => {
		if (!scrollInfo.current?.scrollLength) {
			return index === 0 ? selectedOpacity : unselectedOpacity;
		}
		const pageLength = scrollInfo.current?.scrollLength / total;
		const minScroll = pageLength * index;
		const maxScroll = minScroll + pageLength;
		const isSelected2 =
			v >= minScroll &&
			(index < total - 1 ? v < maxScroll : index === total - 1);
		return isSelected2 ? selectedOpacity : unselectedOpacity;
	});
	const inlinePadding = gap / 2;
	let top = !axis && index > 0 ? inlinePadding : padding;
	let bottom = !axis && index !== total - 1 ? inlinePadding : padding;
	let right = axis && index !== total - 1 ? inlinePadding : padding;
	let left = axis && index > 0 ? inlinePadding : padding;
	return (
		<button
			aria-label={`Scroll to page ${index + 1}`}
			type={"button"}
			{...props}
			style={{
				...buttonStyle,
				padding: `${top}px ${right}px ${bottom}px ${left}px`,
			}}
		>
			<motion.div
				style={{
					...dotStyle2,
					opacity,
				}}
			/>
		</button>
	);
}
function Placeholder() {
	return (
		<section style={placeholderStyles}>
			<div style={emojiStyles}>{"\u2728"}</div>
			<p style={titleStyles}>{"Connect to Content"}</p>
			<p style={subtitleStyles}>
				{"Add layers or components to swipe between."}
			</p>
		</section>
	);
}
function MouseStyles() {
	return (
		<div
			dangerouslySetInnerHTML={{
				__html: `<style>@media (pointer: fine) {
                .framer--carousel[data-show-scrollbar="false"]::-webkit-scrollbar {
                    display: none;
                    -webkit-appearance: none;
                    width: 0;
                    height: 0;
                }

                .framer--carousel[data-show-scrollbar="false"]::-webkit-scrollbar-thumb {
                    display: none;
                }

                .framer--carousel[data-show-scrollbar="false"] {
                    scrollbar-width: none;
                    scrollbar-height: none;
                }
            }</style>`,
			}}
		/>
	);
}
var placeholderStyles = {
	display: "flex",
	width: "100%",
	height: "100%",
	placeContent: "center",
	placeItems: "center",
	flexDirection: "column",
	color: "#96F",
	background: "rgba(136, 85, 255, 0.1)",
	fontSize: 11,
	overflow: "hidden",
	padding: "20px 20px 30px 20px",
};
var emojiStyles = {
	fontSize: 32,
	marginBottom: 10,
};
var titleStyles = {
	margin: 0,
	marginBottom: 10,
	fontWeight: 600,
	textAlign: "center",
};
var subtitleStyles = {
	margin: 0,
	opacity: 0.7,
	maxWidth: 130,
	lineHeight: 1.5,
	textAlign: "center",
};
var baseContainerStyle = {
	display: "flex",
	overflow: "hidden",
	width: "100%",
	height: "100%",
	position: "relative",
};
var baseCarouselStyle = {
	padding: 0,
	margin: 0,
	listStyle: "none",
	position: "relative",
	display: "flex",
	flex: "1 1 100%",
	width: "100%",
	height: "100%",
};
var baseButtonStyles = {
	border: "none",
	display: "flex",
	placeContent: "center",
	placeItems: "center",
	overflow: "hidden",
	background: "transparent",
	cursor: "pointer",
	margin: 0,
	padding: 0,
};
var controlsStyles = {
	display: "flex",
	justifyContent: "space-between",
	alignItems: "center",
	position: "absolute",
	top: 0,
	left: 0,
	right: 0,
	bottom: 0,
	pointerEvents: "none",
	border: 0,
	padding: 0,
	margin: 0,
};
var dotsContainerStyle = {
	display: "flex",
	placeContent: "center",
	placeItems: "center",
	overflow: "hidden",
	position: "absolute",
	pointerEvents: "auto",
};
var dotStyle = {
	borderRadius: "50%",
	background: "white",
	cursor: "pointer",
	border: "none",
	placeContent: "center",
	placeItems: "center",
	padding: 0,
};

// /:https://framerusercontent.com/modules/XIJAL8xLolkf52DT1yYG/TJwqayHLbH5LjeDfVGX5/hTEXCOFwi.js
var SearchBarFonts = getFonts(stdin_default);
var CarouselFonts = getFonts(Carousel);
var serializationHash = "framer-PGNMS";
var variantClassNames = {
	h8l1HuTP9: "framer-v-134dpxa",
};
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React3.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React3.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion2.create(React3.Fragment);
var getProps = ({ height, id, width, ...props }) => {
	return {
		...props,
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React3.forwardRef(function (props, ref) {
	const fallbackRef = useRef4(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React3.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const { style, className, layoutId, variant, ...restProps } = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		defaultVariant: "h8l1HuTP9",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion2.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-134dpxa",
							className,
							classNames,
						)}
						data-framer-name={"Variant 1"}
						layoutDependency={layoutDependency}
						layoutId={"h8l1HuTP9"}
						ref={refBinding}
						style={{
							...style,
						}}
					>
						<ComponentViewportProvider
							height={50}
							width={"486px"}
							y={
								(componentViewport?.y || 0) +
								0 +
								(((componentViewport?.height || 800) - 0 - 665) / 2 + 0 + 0)
							}
						>
							<SmartComponentScopedContainer
								className={"framer-1otkgyz-container"}
								layoutDependency={layoutDependency}
								layoutId={"A6WGF8X7g-container"}
								nodeId={"A6WGF8X7g"}
								rendersWithMotion={true}
								scopeId={"hTEXCOFwi"}
							>
								{_jsx2(stdin_default, {
									height: "100%",
									id: "A6WGF8X7g",
									layoutId: "A6WGF8X7g",
									style: {
										height: "100%",
										width: "100%",
									},
									width: "100%",
								})}
							</SmartComponentScopedContainer>
						</ComponentViewportProvider>
						<RichText
							__fromCanvasComponent={true}
							className={"framer-1vc94vs"}
							fonts={["Inter"]}
							layoutDependency={layoutDependency}
							layoutId={"X5DET8qfR"}
							style={{
								"--extracted-r6o4lv": "rgb(110, 110, 110)",
								"--framer-link-text-color": "rgb(0, 153, 255)",
								"--framer-link-text-decoration": "underline",
							}}
							verticalAlignment={"center"}
							withExternalLayout={true}
						>
							<React3.Fragment>
								<motion2.p
									style={{
										"--framer-font-size": "25px",
										"--framer-text-alignment": "center",
										"--framer-text-color":
											"var(--extracted-r6o4lv, rgb(110, 110, 110))",
									}}
								>
									{"Name of Song"}
								</motion2.p>
							</React3.Fragment>
						</RichText>
						<Image
							background={{
								alt: "",
								fit: "fill",
							}}
							className={"framer-4gfdpu"}
							layoutDependency={layoutDependency}
							layoutId={"zVNrPy2Bg"}
						/>
						<RichText
							__fromCanvasComponent={true}
							className={"framer-1rtsqzv"}
							fonts={["Inter"]}
							layoutDependency={layoutDependency}
							layoutId={"uaVzywnHC"}
							style={{
								"--extracted-r6o4lv": "rgb(110, 110, 110)",
								"--framer-link-text-color": "rgb(0, 153, 255)",
								"--framer-link-text-decoration": "underline",
							}}
							verticalAlignment={"center"}
							withExternalLayout={true}
						>
							<React3.Fragment>
								<motion2.p
									style={{
										"--framer-font-size": "25px",
										"--framer-text-alignment": "center",
										"--framer-text-color":
											"var(--extracted-r6o4lv, rgb(110, 110, 110))",
									}}
								>
									{"Reccomendations"}
								</motion2.p>
							</React3.Fragment>
						</RichText>
						<ComponentViewportProvider>
							<SmartComponentScopedContainer
								className={"framer-29a7xt-container"}
								isAuthoredByUser={true}
								isModuleExternal={true}
								layoutDependency={layoutDependency}
								layoutId={"ekdpCqJ_a-container"}
								nodeId={"ekdpCqJ_a"}
								rendersWithMotion={true}
								scopeId={"hTEXCOFwi"}
							>
								<Carousel
									align={"center"}
									ariaLabel={""}
									arrowObject={{
										arrowFill: "rgba(0, 0, 0, 0.2)",
										arrowPadding: 20,
										arrowRadius: 40,
										arrowSize: 40,
										showMouseControls: true,
									}}
									axis={true}
									borderRadius={0}
									fadeObject={{
										fadeAlpha: 0,
										fadeContent: false,
										fadeInset: 0,
										fadeTransition: {
											damping: 60,
											delay: 0,
											mass: 1,
											stiffness: 500,
											type: "spring",
										},
										fadeWidth: 25,
									}}
									gap={10}
									height={"100%"}
									id={"ekdpCqJ_a"}
									layoutId={"ekdpCqJ_a"}
									padding={10}
									paddingBottom={10}
									paddingLeft={10}
									paddingPerSide={false}
									paddingRight={10}
									paddingTop={10}
									progressObject={{
										dotsActiveOpacity: 1,
										dotsBackground: "rgba(0, 0, 0, 0.2)",
										dotsBlur: 4,
										dotsFill: "rgb(255, 255, 255)",
										dotsGap: 10,
										dotsInset: 10,
										dotSize: 10,
										dotsOpacity: 0.5,
										dotsPadding: 10,
										dotsRadius: 50,
										showProgressDots: false,
										showScrollbar: false,
									}}
									sizingObject={{
										heightInset: 0,
										heightRows: 2,
										heightType: "auto",
										widthColumns: 2,
										widthInset: 0,
										widthType: "auto",
									}}
									slots={[
										<Image
											background={{
												alt: "",
												fit: "fit",
												positionX: "center",
												positionY: "center",
											}}
											className={"framer-e7sjmg"}
											layoutDependency={layoutDependency}
											layoutId={"Ddhsi2oW7"}
										/>,
										<Image
											background={{
												alt: "",
												fit: "fit",
												positionX: "center",
												positionY: "center",
											}}
											className={"framer-n7rccs"}
											layoutDependency={layoutDependency}
											layoutId={"nelAlVUu_"}
										/>,
										<Image
											background={{
												alt: "",
												fit: "fit",
												positionX: "center",
												positionY: "center",
											}}
											className={"framer-1n7z3kg"}
											layoutDependency={layoutDependency}
											layoutId={"dqkAkIABD"}
										/>,
										<Image
											background={{
												alt: "",
												fit: "fit",
												positionX: "center",
												positionY: "center",
											}}
											className={"framer-nhj6xm"}
											layoutDependency={layoutDependency}
											layoutId={"sLH7RoWM4"}
										/>,
										<Image
											background={{
												alt: "",
												fit: "fit",
												positionX: "center",
												positionY: "center",
											}}
											className={"framer-nn12sl"}
											layoutDependency={layoutDependency}
											layoutId={"WsDhmEoyw"}
										/>,
									]}
									snapObject={{
										fluid: false,
										snap: true,
										snapEdge: "center",
									}}
									style={{
										height: "100%",
										width: "100%",
									}}
									width={"100%"}
								/>
							</SmartComponentScopedContainer>
						</ComponentViewportProvider>
					</motion2.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-PGNMS.framer-d13aw8, .framer-PGNMS .framer-d13aw8 { display: block; }",
	".framer-PGNMS.framer-134dpxa { align-content: center; align-items: center; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 10px; height: 800px; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: min-content; }",
	".framer-PGNMS .framer-1otkgyz-container { flex: none; height: 50px; position: relative; width: 486px; }",
	".framer-PGNMS .framer-1vc94vs, .framer-PGNMS .framer-1rtsqzv { flex: none; height: 48px; position: relative; white-space: pre-wrap; width: 358px; word-break: break-word; word-wrap: break-word; }",
	".framer-PGNMS .framer-4gfdpu { flex: none; height: 204px; position: relative; width: 327px; }",
	".framer-PGNMS .framer-29a7xt-container { flex: none; height: 275px; position: relative; width: 971px; }",
	".framer-PGNMS .framer-e7sjmg, .framer-PGNMS .framer-n7rccs, .framer-PGNMS .framer-1n7z3kg, .framer-PGNMS .framer-nhj6xm, .framer-PGNMS .framer-nn12sl { height: 250px; position: relative; width: 400px; }",
];
var FramerhTEXCOFwi = withCSS(Component, css, "framer-PGNMS");
var stdin_default2 = FramerhTEXCOFwi;
FramerhTEXCOFwi.displayName = "main body";
FramerhTEXCOFwi.defaultProps = {
	height: 800,
	width: 971,
};
addFonts(
	FramerhTEXCOFwi,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
					url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
					url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+1F00-1FFF",
					url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0370-03FF",
					url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
					url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
					url: "https://framerusercontent.com/assets/vQyevYAyHtARFwPqUzQGpnDs.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB",
					url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2",
					weight: "400",
				},
			],
		},
		...SearchBarFonts,
		...CarouselFonts,
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:main-body
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"50e3606df38c546f19bddd5fcd31b6ef7bbef2c502bb6994060d64b2cfca87c2"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default2, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * Renders MainBodyFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale, ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"50e3606df38c546f19bddd5fcd31b6ef7bbef2c502bb6994060d64b2cfca87c2"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default2}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default2);
var main_body_default = ComponentWithRoot;
export { main_body_default as default };
